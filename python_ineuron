Q1. Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

sol.

nums = [2,7,11,15]
target = 9
for i in range(0,len(nums)):
    for j in range(i+1,len(nums)):
        if target == nums[i]+nums[j]:
            print([i,j])
            break
        else:
            continue
[0, 1]
Q2. Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.

sol.

nums = [3,2,2,3]
val = 3
count = 0
for i in range(len(nums)):
    if nums[i] == val:
        continue
    nums[count] = nums[i]
    count += 1
print(count)
2
Q3. Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

sol.

def element_search(nums,l,h,target):
    if h>=l:
        mid = (h+l)//2
        if nums[mid] == target:
            return mid
        
        elif nums[mid]>target:
            return element_search(nums,l,mid-1,target)
        elif nums[mid]<target:
            return element_search(nums,mid+1,h,target)
    else:
        return l

nums = [1,3,5,6]
target = 7
l = 0
h = len(nums)-1
print(element_search(nums,l,h,target))
4
Q4. You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

sol

digits = [1,2,3]
string_digits = "".join(str(i) for i in digits)
string_digits = int(string_digits)+1
res = [int(i) for i in str(string_digits)]
print(res)
[1, 2, 4]
Q5. You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

sol.

def solution(nums1, m, nums2, n):
        i = m - 1
        j = n - 1
        k = m + n - 1
        while j >= 0:
            if i >= 0 and nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                k -= 1
                i -= 1
            else:
                nums1[k] = nums2[j]
                k -= 1
                j -= 1
        print(nums1)
nums1 = [1,2,3,0,0,0]
m = 3
nums2 = [2,5,6]
n = 3
solution(nums1,m,nums2,n)
[1, 2, 2, 3, 5, 6]
Q6. Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

sol.

from collections import Counter
def solution(nums):
    counter = Counter(nums)
    for key,value in counter.items():
        if value>1:
            return True
            break
    return False

nums = [1,2,3,1]
solution(nums)
    
True
Q7. Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the nonzero elements.

sol.

nums = [0,1,0,3,12]
count = 0
for i in range(len(nums)):
    if nums[i] != 0:
        nums[count] = nums[i]
        count +=1
while(count<len(nums)):
    nums[count] = 0
    count +=1
print(nums)
[1, 3, 12, 0, 0]
Q8. You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

sol.

#
nums = [1,2,2,4]
n = len(nums)
total_sum = nums_sum = set_sum = 0
for i in range(0,len(nums)):
    total_sum = n*(n+1)//2
    nums_sum = sum(nums)
    set_sum = sum(set(nums))
print([nums_sum-set_sum,total_sum-set_sum])
[2, 3]
